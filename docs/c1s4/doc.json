{"type":"document","children":[{"type":"heading","children":[{"type":"text","content":"Maintainablity "},{"type":"emphasis","children":[{"type":"text","content":"p18"}]}],"attributes":{"id":"maintainablity-p18","level":1}},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"It is well known that the majority of the cost of software is not in its initial development, but in its ongoing maintenance—fixing bugs, keeping its systems operational, investigating failures, adapting it to new platforms, modifying it for new use cases, repaying technical debt, and adding new features."}]}]},{"type":"paragraph","children":[{"type":"text"},{"type":"emphasis","children":[{"type":"text","content":"Legacy systems"}]},{"type":"text","content":" are inevitable during the maintenance, as there are numerous reasons why a system persists over time. Therefore, it is difficult to give general recommendations for dealing with them."}]},{"type":"paragraph","children":[{"type":"text","content":"However, it is able and recommended to design software in such a way that it will hopefully minimize pain during maintenance, and thus avoid creating legacy software. To this end, there are 3 design princples:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"operability"}]},{"type":"text","content":": Make it easy for operations teams to keep the system running smoothly."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"simplicity"}]},{"type":"text","content":": Make it easy for new engineers to understand the system, by removing as much complexity as possible from the system."}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"evolvability"}]},{"type":"text","content":": Make it easy for engineers to make changes to the system in the future, adapting it for unanticipated use cases as requirements change. Also known as extensibility, modifiability, or plasticity."}]}]}],"attributes":{"ordered":true,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Operability: Making Life Easy for Operations "},{"type":"emphasis","children":[{"type":"text","content":"p19"}]}],"attributes":{"id":"operability-making-life-easy-for-operations-p19","level":2}},{"type":"heading","children":[{"type":"text","content":"Operations team responsibilities "},{"type":"emphasis","children":[{"type":"text","content":"p19"}]}],"attributes":{"id":"operations-team-responsibilities-p19","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Monitoring"}]},{"type":"text","content":" the health of the system and quickly "},{"type":"strong","children":[{"type":"text","content":"restoring"}]},{"type":"text","content":" service if it goes into a\nbad state"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Tracking"}]},{"type":"text","content":" down the cause of problems, such as system failures or degraded performance"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Keeping software and platforms "},{"type":"strong","children":[{"type":"text","content":"up to date"}]},{"type":"text","content":", including security patches"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Keeping tabs on how different systems "},{"type":"strong","children":[{"type":"text","content":"affect"}]},{"type":"text","content":" each other, so that a "},{"type":"strong","children":[{"type":"text","content":"problematic change"}]},{"type":"text","content":" can be avoided before it causes damage"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Anticipating future problems and solving them before they occur (e.g., capacity\nplanning)"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Establishing good practices and tools for deployment, configuration management, and more"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Performing "},{"type":"strong","children":[{"type":"text","content":"complex maintenance"}]},{"type":"text","content":" tasks, such as moving an application from one platform to another"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Maintaining the "},{"type":"strong","children":[{"type":"text","content":"security"}]},{"type":"text","content":" of the system as "},{"type":"strong","children":[{"type":"text","content":"configuration changes"}]},{"type":"text","content":" are made"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Defining processes that make operations "},{"type":"strong","children":[{"type":"text","content":"predictable"}]},{"type":"text","content":" and help keep the production environment "},{"type":"strong","children":[{"type":"text","content":"stable"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Preserving the organization’s knowledge"}]},{"type":"text","content":" about the system, even as individual\npeople come and go"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Making routine tasks easy "},{"type":"emphasis","children":[{"type":"text","content":"p20"}]}],"attributes":{"id":"making-routine-tasks-easy-p20","level":3}},{"type":"paragraph","children":[{"type":"text","content":"Good operability means making routine tasks easy, allowing the operations team to focus their efforts on high-value activities. Data systems can do various things to make routine tasks easy, including:"}]},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Providing "},{"type":"strong","children":[{"type":"text","content":"visibility"}]},{"type":"text","content":" into the runtime behavior and internals of the system, with good "},{"type":"strong","children":[{"type":"text","content":"monitoring"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Providing good support for "},{"type":"strong","children":[{"type":"text","content":"automation"}]},{"type":"text","content":" and "},{"type":"strong","children":[{"type":"text","content":"integration"}]},{"type":"text","content":" with standard tools"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Avoiding dependency on individual machines"}]},{"type":"text","content":" (allowing machines to be taken\ndown for maintenance while the system as a whole continues running uninterrupted)"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Providing good "},{"type":"strong","children":[{"type":"text","content":"documentation"}]},{"type":"text","content":" and an easy-to-understand "},{"type":"strong","children":[{"type":"text","content":"operational model"}]},{"type":"text","content":" (\"If I do X, Y will happen\")"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Providing good "},{"type":"strong","children":[{"type":"text","content":"default"}]},{"type":"text","content":" behavior, but also giving administrators the freedom to "},{"type":"strong","children":[{"type":"text","content":"override"}]},{"type":"text","content":" defaults when needed"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"Self-healing"}]},{"type":"text","content":" where appropriate, but also giving administrators "},{"type":"strong","children":[{"type":"text","content":"manual control"}]},{"type":"text","content":" over the system state when needed"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"Exhibiting "},{"type":"strong","children":[{"type":"text","content":"predictable"}]},{"type":"text","content":" behavior, minimizing surprises"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Simplicity: Managing Complexity "},{"type":"emphasis","children":[{"type":"text","content":"p20"}]}],"attributes":{"id":"simplicity-managing-complexity-p20","level":2}},{"type":"heading","children":[{"type":"text","content":"Complexity Symptoms "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"complexity-symptoms-p21","level":3}},{"type":"list","children":[{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"explosion of the "},{"type":"strong","children":[{"type":"text","content":"state space"}]},{"type":"text"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"tight coupling"}]},{"type":"text","content":" of modules"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"tangled dependencies"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"inconsistent naming and terminology"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text"},{"type":"strong","children":[{"type":"text","content":"hacks"}]},{"type":"text","content":" to improving performance"}]}]},{"type":"listItem","children":[{"type":"paragraph","children":[{"type":"text","content":"special cases"}]}]}],"attributes":{"ordered":false,"tight":true}},{"type":"heading","children":[{"type":"text","content":"Accidental Complexity "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"accidental-complexity-p21","level":3}},{"type":"blockQuote","children":[{"type":"paragraph","children":[{"type":"text","content":"Making a system simpler does not necessarily mean reducing its functionality; it can also mean removing accidental complexity."}]}]},{"type":"paragraph","children":[{"type":"text","content":"Definition: It is not "},{"type":"strong","children":[{"type":"text","content":"inherent"}]},{"type":"text","content":" in the problem that the software solves (as seen by the users) but arises only from the "},{"type":"strong","children":[{"type":"text","content":"implementation"}]}]},{"type":"paragraph","children":[{"type":"text","content":"Solution: "},{"type":"strong","children":[{"type":"text","content":"abstraction"}]}]},{"type":"paragraph","children":[{"type":"text","content":"This book focus on good abstractions that can extract parts of a large system into well-defined, reusable components."}]},{"type":"heading","children":[{"type":"text","content":"Evolvability: Making Change Easy "},{"type":"emphasis","children":[{"type":"text","content":"p21"}]}],"attributes":{"id":"evolvability-making-change-easy-p21","level":2}},{"type":"paragraph","children":[{"type":"text","content":"Evolvability means adapting to change. In terms of organizational processes, "},{"type":"strong","children":[{"type":"text","content":"Agile"}]},{"type":"text","content":" working patterns provide a framework for adapting to change."}]}],"attributes":{"date":"2025-09-11","tags":["book","designing data intensive applications"],"title":"Maintainablity"}}