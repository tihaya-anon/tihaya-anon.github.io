{"version":3,"mappings":";+iKAmBA,SAAwBA,GAAsB,CAC5C,KAAAC,EACA,SAAAC,EAAW,aACX,MAAAC,EACA,gBAAAC,EAAkB,GAClB,QAAAC,EAAU,EACZ,EAA+B,CAC7B,KAAM,CAAE,QAAAC,CAAA,EAAYC,EAAA,EAEd,CAACC,EAAQC,CAAS,EAAIC,WAGlB,IAAI,EAyCd,OAtCAC,YAAU,IAAM,EACK,SAAY,CAE7B,MAAAC,EAAA,IAAM,OAAO,sBAAe,iFAC5B,KAAM,CAAE,YAAAC,EAAa,aAAAC,GAAiB,MAAAF,EAAA,4BAAAC,EAAA,aAAAC,CAAA,OAAM,QAAO,8EAAgD,qBAAAD,EAAA,aAAAC,CAAA,gCAG7FC,EAAY,CAChB,GAAGF,EACH,0BAA2B,CACzB,GAAGA,EAAY,yBAAyB,EACxC,WAAY,eAEd,2BAA4B,CAC1B,GAAGA,EAAY,0BAA0B,EACzC,WAAY,cACd,EAGIG,EAAa,CACjB,GAAGF,EACH,0BAA2B,CACzB,GAAGA,EAAa,yBAAyB,EACzC,WAAY,eAEd,2BAA4B,CAC1B,GAAGA,EAAa,0BAA0B,EAC1C,WAAY,cACd,EAGFL,EAAU,CAAE,UAAAM,EAAW,WAAAC,EAAY,CACrC,GAEA,CACF,EAAG,EAAE,EAGAR,EASHS,MAACC,EAAA,CACC,SAAAhB,EACA,MAAOC,IAAU,OAASK,EAAO,UAAYA,EAAO,WACpD,gBAAAJ,EACA,UAAW,GACX,YAAa,CACX,OAAQ,EACR,QAAS,8BACT,SAAU,UACV,gBAAiB,cACjB,WAAY,eAEd,gBAAiB,CACf,MAAO,UACP,SAAU,SAEZ,aAAc,CACZ,MAAO,CACL,QAAS,SACT,WAAY,cACd,EAEF,cAAe,GACf,UAAWe,EAAG,+BAAgCd,GAAW,aAAcC,CAAO,EAE7E,WAAK,MAAK,GAhCXc,OAAC,OAAI,UAAU,4CACb,UAAAH,MAAC,OAAI,UAAU,wCAAwC,yCAA6B,EACpFA,MAACI,EAAA,CAAS,UAAU,SAAS,YAAa,GAAK,MAAM,GAAG,kBAAmB,EAAG,QAAQ,UAAU,GAClG,CAgCN","names":["LazySyntaxHighlighter","code","language","theme","showLineNumbers","rounded","resetCN","useReactiveScrollBar","styles","setStyles","useState","useEffect","__vitePreload","gruvboxDark","gruvboxLight","darkStyle","lightStyle","jsx","SyntaxHighlighter","cn","jsxs","StarIcon"],"ignoreList":[],"sources":["../../frontend/src/components/lazy-syntax-highlighter.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { PrismAsync as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport StarIcon from \"./star-icon\";\r\nimport useReactiveScrollBar from \"@/hooks/use-reactive-scroll-bar\";\r\n\r\n// Define props interface\r\ninterface LazySyntaxHighlighterProps {\r\n  code: string;\r\n  language?: string;\r\n  theme: string;\r\n  showLineNumbers?: boolean;\r\n  rounded?: boolean;\r\n}\r\n\r\ntype Style = {\r\n  [key: string]: React.CSSProperties;\r\n};\r\n\r\nexport default function LazySyntaxHighlighter({\r\n  code,\r\n  language = \"typescript\",\r\n  theme,\r\n  showLineNumbers = true,\r\n  rounded = false,\r\n}: LazySyntaxHighlighterProps) {\r\n  const { resetCN } = useReactiveScrollBar();\r\n  // State to hold the dynamically loaded styles\r\n  const [styles, setStyles] = useState<{\r\n    darkStyle: Style;\r\n    lightStyle: Style;\r\n  } | null>(null);\r\n\r\n  // Load the styles dynamically\r\n  useEffect(() => {\r\n    const loadStyles = async () => {\r\n      // Import the syntax highlighter and styles only when the component is mounted\r\n      await import(\"@/code/syntax\");\r\n      const { gruvboxDark, gruvboxLight } = await import(\"react-syntax-highlighter/dist/esm/styles/prism\");\r\n\r\n      // Create custom styles with transparent backgrounds\r\n      const darkStyle = {\r\n        ...gruvboxDark,\r\n        'pre[class*=\"language-\"]': {\r\n          ...gruvboxDark['pre[class*=\"language-\"]'],\r\n          background: \"transparent\",\r\n        },\r\n        'code[class*=\"language-\"]': {\r\n          ...gruvboxDark['code[class*=\"language-\"]'],\r\n          background: \"transparent\",\r\n        },\r\n      };\r\n\r\n      const lightStyle = {\r\n        ...gruvboxLight,\r\n        'pre[class*=\"language-\"]': {\r\n          ...gruvboxLight['pre[class*=\"language-\"]'],\r\n          background: \"transparent\",\r\n        },\r\n        'code[class*=\"language-\"]': {\r\n          ...gruvboxLight['code[class*=\"language-\"]'],\r\n          background: \"transparent\",\r\n        },\r\n      };\r\n\r\n      setStyles({ darkStyle, lightStyle });\r\n    };\r\n\r\n    loadStyles();\r\n  }, []);\r\n\r\n  // If styles haven't loaded yet, show a simple placeholder\r\n  if (!styles) {\r\n    return (\r\n      <div className=\"flex flex-row items-center justify-center\">\r\n        <div className=\"p-4 text-sm animate-pulse text-center\">Loading syntax highlighter...</div>\r\n        <StarIcon animation=\"rotate\" strokeWidth={0.2} title=\"\" animationDuration={2} variant=\"primary\" />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <SyntaxHighlighter\r\n      language={language}\r\n      style={theme === \"dark\" ? styles.darkStyle : styles.lightStyle}\r\n      showLineNumbers={showLineNumbers}\r\n      wrapLines={true}\r\n      customStyle={{\r\n        margin: 0,\r\n        padding: \"0.7rem 1.2rem 0.7rem 0.5rem\",\r\n        fontSize: \"0.85rem\",\r\n        backgroundColor: \"transparent\",\r\n        background: \"transparent\",\r\n      }}\r\n      lineNumberStyle={{\r\n        color: \"#64748b\",\r\n        minWidth: \"2.5em\",\r\n      }}\r\n      codeTagProps={{\r\n        style: {\r\n          display: \"inline\",\r\n          background: \"transparent\",\r\n        },\r\n      }}\r\n      wrapLongLines={false}\r\n      className={cn(\"w-full bg-primary-foreground\", rounded && \"rounded-sm\", resetCN)}\r\n    >\r\n      {code.trim()}\r\n    </SyntaxHighlighter>\r\n  );\r\n}\r\n"],"file":"assets/lazy-syntax-highlighter-DPN4wGx-.js"}